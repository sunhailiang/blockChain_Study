package main

import "fmt"

//人类--声明共性
type person struct {
	gender string
	name   string
	age    int
	job   string
}

//学习--人类的具备的功能
func (p *person) study() {
	fmt.Printf("我是%s,今年%d,%s生，正在学习初中课程...\n", p.name, p.age, p.gender)
}
func main() {
	// 类是共性的（比如人类有名字，职业，会学习的能力等等），对象是独特的（比如人类有名字，性别，职业等特征
	// 实例化一个对象p(就像造了一个人)，这个对象同样具备了类的基础特征（首先是(一个)人）
	// （每个）人都是不一样的，都有独特的特征，比如肤色黑的，白的，职业可能是警察，医生，教师...年纪可能是11，18，30...
	// 注释：当你实例化对象，并且在为这个对象赋予独特特征的过程，这个过程就是面向对象解决问题方式
	         //如你创建p2：=person{}//大括号中你想怎么赋值那是根据你当前业务进行处理，但一些列操作都准确针对p2这个对象，操作p2的过程就是面向对象编程的过程
	p:= person{"man", "harry", 27,"学生"}//这个复制过程就是面向对象操作-独特的
	p.study()  //个体天生有同类一样的能力，至于学什么也是个体独特的
	//在代码中：面向对象的三大特性，//封装：就是一个个函数，说白了就是用代码实现了一个个功能，独立且可复用
	                                //继承：继承就是
                                    //多态：
}
